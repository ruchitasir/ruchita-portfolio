{"version":3,"sources":["Nav.jsx","pages/Home.jsx","pages/Post.jsx","pages/Blog.jsx","pages/About.jsx","pages/Projects.jsx","Content.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","props","to","Home","Post","title","body","onClick","delt","index","Blog","posts","map","post","i","key","useState","newTitle","setNewtitle","newBody","setNewBody","className","onSubmit","e","preventDefault","addBlogPost","console","log","type","placeholder","value","onChange","target","required","About","Projects","Content","setPosts","titleT","bodyT","currentPosts","splice","exact","path","component","render","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b07bf1b.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Nav= props=> {\n   return(\n    <nav>\n        <ul>\n            <li> <Link to='/'>Home</Link> </li>\n            <li> <Link to='/blog'>Blog</Link> </li>\n            <li> <Link to='/about'>About</Link> </li>\n            <li> <Link to='/projects'>Projects</Link> </li>\n        </ul>\n    </nav> \n        )\n    }\n\nexport default Nav","import React from 'react';\n\nconst Home= props=> {\n   return(\n          <div>Home</div>\n          )\n    }\n\nexport default Home","import React from 'react';\n\nconst Post= props=> {\n   return(\n          <div>\n              <li>\n                        <h2> {props.title} </h2>\n                        <h3> {props.body}</h3>\n                        <button onClick={()=>props.delt(props.index)}>Remove this post</button>\n                        <hr/>\n             </li>\n          </div>\n        )\n    }\n\nexport default Post","import React,{useState} from 'react';\nimport Post from './Post';\n\nconst Blog= props=> {\n   \n        let posts = props.posts.map((post,i)=>{\n                return(\n                    <Post key={i} title={post.title} body={post.body} index={i} delt={props.delt}/>\n                )\n            })\n        let [newTitle, setNewtitle] = useState('');\n        let [newBody, setNewBody] = useState('');\n        \n        const handleSubmit=(e)=>{\n        setNewtitle('')\n        setNewBody('')\n        e.preventDefault()\n        if(newTitle){\n            props.addBlogPost(newTitle,newBody)\n        }\n        else{\n            console.log(\"title is empty\")\n        }\n       \n    }\n\n\n\n\n   return(\n          <div>\n              <h1 className=\"blogH1\">My blogs so far!</h1>\n              <ul>\n                    {posts}\n              </ul>\n              <h2>Add a new blog</h2>\n              <form onSubmit={handleSubmit}>\n                  <label>Title:</label>\n                        <input type=\"text\"  placeholder=\"Title of the post\" value={newTitle} onChange={e=> setNewtitle(e.target.value)} required/>\n                  <div> \n                  <label>Description</label>\n                        <input  type=\"text\"  placeholder=\"Description of the post\" value={newBody} onChange={e=> setNewBody(e.target.value)} required/>\n                  </div>\n                  <button type=\"submit\">Add a new post</button>  \n              </form>\n          </div>\n          )\n    }\n\nexport default Blog","import React from 'react';\n\nconst About= props=> {\n   return(\n          <div>About</div>\n        )\n    }\n\nexport default About","import React from 'react';\n\nconst Projects= props=> {\n   return(\n          <div>Project</div>\n          )\n    }\n\nexport default Projects","import React,{useState} from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Blog from './pages/Blog';\nimport About from './pages/About';\nimport Projects from './pages/Projects';\n\nconst Content= props=> {\n    let [posts, setPosts] = useState([\n        {title: 'Machine Learning', body: 'ML stub'},\n        {title: 'React' , body: 'React stub'},\n        {title:'Python' , body: 'Python stub'},\n        {title: 'Typescript' , body: 'Typescript stub' },\n    ])\n\n    const addBlogPost=(titleT,bodyT)=>{\n      \n        setPosts([...posts,{title:titleT, body: bodyT}])\n    }\n\n    const delt=(index)=>{\n        console.log('delete index',index)\n        let currentPosts = [...posts]\n        currentPosts.splice(index,1)\n        setPosts(currentPosts) \n    }\n          \n\n   return(\n          <div>\n             <Route exact path='/' component={Home}/>\n             <Route  path='/blog' render={()=>\n                 <Blog posts={posts} addBlogPost={addBlogPost} delt={delt} /> \n                 }/>\n             <Route  path='/about' component={About}/>\n             <Route  path='/projects' component={Projects}/>\n         </div>\n          )\n    }\n\nexport default Content\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\n\nimport Nav from './Nav';\nimport Content from './Content';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <h1>  My Portfolio</h1>\n      </header>\n      <Router>\n        <Nav/>\n        <Content/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}